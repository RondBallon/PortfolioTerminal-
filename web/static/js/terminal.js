/**
 * Classe Terminal
 * G√®re toute la logique du terminal interactif
 */
class Terminal {
    constructor() {
        // √âl√©ments DOM principaux
        this.input = document.getElementById('terminal-input');
        this.output = document.getElementById('terminal-output');
        this.setupEventListeners();
        
        // Liste des commandes disponibles
        // Chaque commande est associ√©e √† une m√©thode
        this.commands = {
            'help': () => this.showHelp(),          // Affiche l'aide
            'whoiam': this.whoIAm.bind(this),       // Informations personnelles // j'ai du bind.
            'projets': () => this.showProjects(),   // Liste des projets
            'cv': () => this.showCV(),              // Ouvre le CV
            'github': () => this.openGithub(),      // Profil GitHub
            'clear': () => this.clear(),            // Efface l'√©cran
            'skills': () => this.showSkills(),      // Comp√©tences
            'contact': () => this.showContact(),    // Coordonn√©es
            'theme': () => this.toggleTheme(),      // Change le th√®me
            'sudo': () => this.print("Ca donne envie hein ! üòÑ", 'error'),
            '42': () => this.show42Answer()         // Easter egg
        };

        // Configuration des th√®mes de couleur
        this.themes = {
            dark: {
                background: '#1e1e1e',
                text: '#f0f0f0',
                prompt: '#00ff00'
            },
            light: {
                background: '#e9c46a',
                text: 'e76f51',
                prompt: '#008800'
            },
            warp: {
                background: 'linear-gradient(to right, #f0f0f0 0%, #f0f0f0 100%)',
                text: '#1e1e1e',
                prompt: '#008800'
            },
        };
        this.currentTheme = 'dark';

        // Initialisation de l'interface
        this.terminalWindow = document.querySelector('.terminal-window');
        this.cmdButton = document.querySelector('.cmd-button');
        this.setupWindowControls();
        this.printWelcome();  // Affiche le message de bienvenue

        // Historique des commandes
        this.commandHistory = [];
        this.historyIndex = -1;
    }

    /**
     * Gestion des √©v√©nements
     * Principalement la saisie des commandes
     */
    setupEventListeners() {
        this.input.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                const command = this.input.value.trim();
                this.executeCommand(command);
                this.input.value = '';
            }
        });

        // √âcouter les √©v√©nements de touches
        document.addEventListener('keydown', (event) => {
            // V√©rifier si la touche press√©e est la fl√®che haut
            if (event.key === 'ArrowUp') {
                // Si l'index de l'historique est sup√©rieur √† 0, afficher la commande pr√©c√©dente
                if (this.historyIndex > 0) {
                    this.historyIndex--;
                    this.input.value = this.commandHistory[this.historyIndex];
                }
            } 
            // V√©rifier si la touche press√©e est la fl√®che bas
            else if (event.key === 'ArrowDown') {
                // Si l'index de l'historique est inf√©rieur au nombre total de commandes, afficher la commande suivante
                if (this.historyIndex < this.commandHistory.length - 1) {
                    this.historyIndex++;
                    this.input.value = this.commandHistory[this.historyIndex];
                }
            }
        });
    }

    /**
     * Affiche du texte dans le terminal
     * @param {string} texte - Texte √† afficher
     * @param {string} classe - Classe CSS pour le style
     * @param {boolean} withTypingEffect - Active l'effet de frappe
     */
    async print(texte, classe = '', withTypingEffect = false) {
        const ligne = document.createElement('div');
        ligne.className = classe;
        
        if (!withTypingEffect) {
            ligne.innerHTML = texte;
            this.output.appendChild(ligne);
            this.output.scrollTop = this.output.scrollHeight;
            return;
        }

        // Effet de frappe caract√®re par caract√®re
        this.output.appendChild(ligne);
        const lignes = texte.split('\n');
        
        for (const texteLigne of lignes) {
            if (texteLigne.trim() === '') {
                await this.waitMs(100);
                ligne.innerHTML += '<br>';
                continue;
            }
            
            for (const caractere of texteLigne) {
                ligne.textContent += caractere;
                await this.waitMs(5);
            }
            ligne.innerHTML += '<br>';
            await this.waitMs(25);
        }

        this.output.scrollTop = this.output.scrollHeight;
    }

    waitMs(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    async executeCommand(command) {
        await this.print(`visitor@portfolio:~$ ${command}`, 'command');
        
        if (this.commands[command]) {
            await this.commands[command]();
        } else {
            await this.print(`Commande non reconnue: ${command}. Tapez 'help' pour voir les commandes disponibles.`, 'error');
        }

        // Ajouter la commande √† l'historique
        if (command) {
            this.commandHistory.push(command);
            this.historyIndex = this.commandHistory.length; // R√©initialiser l'index
        }
    }

    showHelp() {
        this.print(`Commandes disponibles :`, 'output');
        
        const commands = [
            ['whoiam', 'Affiche des informations sur moi üëÄ'],
            ['help', 'Affiche cette aide üëÆ..üí¨'],
            ['projets', 'Liste les projets ‚öôÔ∏è'],
            ['cv', 'Affiche le CV ‚úçÔ∏è'],
            ['github', 'Ouvre le profil GitHub ‚ôüÔ∏è'],
            ['clear', 'Efface l\'√©cran ‚èπ'],
            ['skills', 'Affiche mes comp√©tences techniques ‚õèÔ∏è'],
            ['contact', 'Affiche mes informations de contact üïµÔ∏è'],
            ['theme', 'Change le th√®me du terminal üåñ..üåò']
        ];

        commands.forEach(([cmd, desc]) => {
            this.print(`‚Ä¢ ${cmd.padEnd(12)} - ${desc}`, 'output');
        });

        this.print(`\nEaster eggs :`, 'output');
        
        const eggs = [
            ['sudo', 'Tentative d\'√©l√©vation de privil√®ges ‚úÖ'],
            ['42', 'Si tu as du temps et du cerveau √† perdre..ü§®..ü§Ø']
        ];

        eggs.forEach(([cmd, desc]) => {
            this.print(`‚Ä¢ ${cmd.padEnd(12)} - ${desc}`, 'output');
        });
    }

    async showProjects() {
        try {
            const response = await fetch('/api/data');
            if (!response.ok) {
                throw new Error(`Erreur HTTP: ${response.status}`);
            }
            const data = await response.json();
            
            await this.print("\n", "output");
            
            data.projects.forEach((project, index) => {
                this.print(`
‚Ä¢ ${project.name}
  üìù Description: ${project.description}
  üõ†Ô∏è  Technologies: ${project.tech.join(", ")}
  üîó URL: <a href="${project.url}" target="_blank" rel="noopener noreferrer">${project.url}</a>

`, "project-item");
            });
            
            if (data.projects.length === 0) {
                this.print("\nAucun projet disponible pour le moment.", "info");
            } else {
                this.print("\nTapez 'github' pour voir tous mes projets sur GitHub.", "info");
            }
            
        } catch (error) {
            this.print("‚ö†Ô∏è Erreur lors du chargement des projets: " + error.message, "error");
        }
    }

    clear() {
        this.output.innerHTML = ''; // Effacer le contenu
        this.showHelp(); // Afficher l'aide apr√®s avoir effac√© l'√©cran !
    }

    showCV() {
        window.open('/static/ress/cv.pdf', '_blank');
    }

    whoIAm() {
        this.print(`
√Ä propos de moi :

‚Ä¢ Pr√©nom       : Cl√©ment 
‚Ä¢ √Çge          : Surement trop vieux pour faire un portfolio terminal :)
‚Ä¢ Localisation : France, Lyon 

Stack technique :
‚Ä¢ Frontend     : JavaScript (Vue.js), HTML, CSS
‚Ä¢ Backend      : GoLang, Node.js, Symfony
‚Ä¢ Infra        : GitHub, Docker

Je suis un d√©veloppeur passionn√© par la cr√©ation et la r√©solution de probl√®mes,
avec un background unique en menuiserie et restauration qui m'apporte une 
perspective diff√©rente sur la conception et la r√©alisation de projets.
    `, 'output');
    }

    async openGithub() {
        try {
            const response = await fetch('/api/data');
            const data = await response.json();
            window.open(data.github, '_blank');
        } catch (error) {
            this.print('Erreur lors de l\'ouverture du profil GitHub.', 'error');
        }
    }

    /**
     * Gestion des contr√¥les de la fen√™tre (minimiser/fermer)
     */
    setupWindowControls() {
        const closeBtn = document.querySelector('.control.close');
        const minimizeBtn = document.querySelector('.control.minimize');
        
        closeBtn.addEventListener('click', () => {
            this.terminalWindow.classList.add('closing');
            setTimeout(() => {
                this.terminalWindow.style.display = 'none';
                this.terminalWindow.classList.remove('closing');
                this.showCmdButton();
            }, 280);
        });

        minimizeBtn.addEventListener('click', () => {
            this.terminalWindow.classList.add('minimizing');
            setTimeout(() => {
                this.terminalWindow.style.display = 'none';
                this.terminalWindow.classList.remove('minimizing');
                this.showCmdButton();
            }, 280);
        });

        this.cmdButton.addEventListener('click', () => {
            this.restoreTerminal();
        });
    }

    showCmdButton() {
        this.cmdButton.style.display = 'block';
        this.cmdButton.classList.add('opening');
    }

    restoreTerminal() {
        this.cmdButton.style.display = 'none';
        this.cmdButton.classList.remove('opening');
        this.terminalWindow.style.display = 'block';
        this.terminalWindow.classList.add('opening');
        
        setTimeout(() => {
            this.terminalWindow.classList.remove('opening');
        }, 280);

        document.getElementById('terminal-input').focus();
    }

    showSkills() {
        this.print(`
             ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
             ‚ïë                    Comp√©tences Techniques                         ‚ïë
             ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

Frontend :
  ‚Ä¢ JavaScript  ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ
  ‚Ä¢ HTML5/CSS3  ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ
  ‚Ä¢ Vue.js      ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ

Backend :
  ‚Ä¢ Go          ‚òÖ‚òÖ‚òÜ‚òÜ‚òÜ  (en apprentissage)
  ‚Ä¢ Node.js     ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ
  ‚Ä¢ PHP/Symfony ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ

Outils & M√©thodes :
  ‚Ä¢ Git                ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ
  ‚Ä¢ Docker             ‚òÖ‚òÖ‚òÜ‚òÜ‚òÜ  (en apprentissage)
  ‚Ä¢ M√©thodologie Agile ‚òÖ‚òÖ‚òÖ‚òÜ‚òÜ

Points forts :
  ‚Ä¢ Apprentissage rapide
  ‚Ä¢ Passionn√© par les nouvelles technologies
  ‚Ä¢ Bonne capacit√© d'adaptation
  ‚Ä¢ Travail en √©quipe

En cours d'apprentissage :
  ‚Ä¢ Architecture logicielle
  ‚Ä¢ Bonnes pratiques de d√©veloppement
  ‚Ä¢ Tests unitaires
  ‚Ä¢ CI/CD
`, 'skills');
    }

    showContact() {
        this.print(`
üìß Email: clement.ferrandery@gmail.com
üì± LinkedIn: <a class ="a1" href="https://www.linkedin.com/in/cl√©ment-ferr/" target="_blank" rel="noopener noreferrer">https://www.linkedin.com/in/cl√©ment-ferr/</a>
üåê Site Web: rdballon.com
    `, 'contact');
    }

    toggleTheme() {
        const themeNames = Object.keys(this.themes);
        const currentIndex = themeNames.indexOf(this.currentTheme);
        const nextIndex = (currentIndex + 1) % themeNames.length;
        this.currentTheme = themeNames[nextIndex];
        
        const theme = this.themes[this.currentTheme];
        document.body.style.background = theme.background;
        document.body.style.color = theme.text;
        document.querySelector('.prompt').style.color = theme.prompt;
        
        if (this.currentTheme === 'warp') {
            document.body.style.backgroundImage = 'linear-gradient(to top, rgba(128, 128, 128, 0.8) 0%, rgba(240, 240, 240, 0.8) 100%)';
            this.terminalWindow.style.backgroundImage = 'linear-gradient(to top, rgba(128, 128, 128, 0.8) 0%, rgba(240, 240, 240, 0.8) 100%)';
        } else {
            document.body.style.backgroundImage = '';
            this.terminalWindow.style.backgroundImage = '';
        }
        
        this.print(`Changement de th√®me vers: ${this.currentTheme}`, 'info');
    }

    printWelcome() {
        this.print(`
Bienvenue sur mon portfolio ! üëã Je suis Cl√©ment, d√©veloppeur web en reconversion professionnelle depuis d√©but 2024. üíª

 Mon parcours est un peu atypique : j'ai √©t√© menuisier et j'ai travaill√© dans la restauration. Ces exp√©riences m'ont appris la pr√©cision, l'importance des d√©tails et le travail d'√©quipe. 

J'aime particuli√®rement la phase de conception et la construction de solutions, que ce soit en bois ou en code. üõ†Ô∏è 
 
Cette passion pour la cr√©ation et la r√©solution de probl√®mes m'a naturellement conduit vers le d√©veloppement web. üöÄ            

 Tapez 'help' pour d√©couvrir les commandes disponibles. üìú`, 'welcome-message', true);
    }

    show42Answer() {
        this.print(`
"O Deep Thought computer," he said, "the task we have designed you to perform is this.
We want you to tell us...." he paused, "The Answer."

‚Ä¢ "The Answer?" said Deep Thought. "The Answer to what?"

‚Ä¢ "Life!" urged Fook.
‚Ä¢ "The Universe!" said Lunkwill.
‚Ä¢ "Everything!" they said in chorus.

Deep Thought paused for a moment's reflection.
"Tricky," he said finally.

‚Ä¢ "But can you do it?"

Again, a significant pause.

‚Ä¢ "Yes," said Deep Thought, "I can do it."
‚Ä¢ "There is an answer?" said Fook with breathless excitement.
‚Ä¢ "Yes," said Deep Thought. "Life, the Universe, and Everything. There is an answer. 
  But, I'll have to think about it."

...

Fook glanced impatiently at his watch.
‚Ä¢ "How long?" he said.
‚Ä¢ "Seven and a half million years," said Deep Thought.

Lunkwill and Fook blinked at each other.
‚Ä¢ "Seven and a half million years...!" they cried in chorus.
‚Ä¢ "Yes," declaimed Deep Thought, "I said I'd have to think about it, didn't I?"

[Seven and a half million years later.... 
 Fook and Lunkwill are long gone, but their descendents continue what they started]

‚Ä¢ "We are the ones who will hear," said Phouchg, 
  "the answer to the great question of Life....!"
‚Ä¢ "The Universe...!" said Loonquawl.
‚Ä¢ "And Everything...!"

"Shhh," said Loonquawl with a slight gesture. 
"I think Deep Thought is preparing to speak!"

There was a moment's expectant pause while panels slowly came to life on the front of the console. 
Lights flashed on and off experimentally and settled down into a businesslike pattern. 
A soft low hum came from the communication channel.

‚Ä¢ "Good Morning," said Deep Thought at last.
‚Ä¢ "Er..good morning, O Deep Thought" said Loonquawl nervously, 
  "do you have...er, that is..."
‚Ä¢ "An Answer for you?" interrupted Deep Thought majestically. 
  "Yes, I have."

The two men shivered with expectancy. Their waiting had not been in vain.

‚Ä¢ "There really is one?" breathed Phouchg.
‚Ä¢ "There really is one," confirmed Deep Thought.
‚Ä¢ "To Everything? To the great Question of Life, the Universe and everything?"
‚Ä¢ "Yes."

Both of the men had been trained for this moment, their lives had been a preparation for it,
they had been selected at birth as those who would witness the answer, but even so they
found themselves gasping and squirming like excited children.

‚Ä¢ "And you're ready to give it to us?" urged Loonsuawl.
‚Ä¢ "I am."
‚Ä¢ "Now?"
‚Ä¢ "Now," said Deep Thought.

They both licked their dry lips.

‚Ä¢ "Though I don't think," added Deep Thought. "that you're going to like it."
‚Ä¢ "Doesn't matter!" said Phouchg. "We must know it! Now!"
‚Ä¢ "Now?" inquired Deep Thought.
‚Ä¢ "Yes! Now..."

"All right," said the computer, and settled into silence again.
The two men fidgeted. The tension was unbearable.

‚Ä¢ "You're really not going to like it," observed Deep Thought.
‚Ä¢ "Tell us!"
‚Ä¢ "All right," said Deep Thought. "The Answer to the Great Question..."
‚Ä¢ "Yes..!"
‚Ä¢ "Of Life, the Universe and Everything..." said Deep Thought.
‚Ä¢ "Yes...!"
‚Ä¢ "Is..." said Deep Thought, and paused.
‚Ä¢ "Yes...!"
‚Ä¢ "Is..."
‚Ä¢ "Yes...!!!...?"

"Forty-two," said Deep Thought, with infinite majesty and calm.

‚Äï Douglas Adams, The Hitchhiker's Guide to the Galaxy`, 'special');
    }
}

// Initialisation du terminal
new Terminal();